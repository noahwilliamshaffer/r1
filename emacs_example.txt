;; Red Hat Linux default .emacs initialization file

;; Are we running XEmacs or Emacs?
(defvar running-xemacs (string-match "XEmacs\\|Lucid" emacs-version))


;; Set up the keyboard so the delete key on both the regular keyboard
;; this is a test of what I am keeping on trying on Emacs, it seems
;; that this is not what I am thinking of the what 
;; and the keypad delete the character under the cursor and to the right
;; under X, instead of the default, backspace behavior.
(global-set-key [delete] 'delete-char)
(global-set-key [kp-delete] 'delete-char)

;; Turn on font-lock mode for Emacs
(cond ((not running-xemacs)
       (global-font-lock-mode t)
))

(setq scroll-bar-mode 'right)	; put scrollbar on right for Emacs 20.x

; The requested kind of justification
;s done whenever lines are filled.

; (setq-default default-justification 'full)                    
(setq-default default-justification 'left)                    

(set-default-font "-adobe-courier-medium-r-*-*-14-*-*-*-m-*-*-*")

;; Visual feedback on selections
(setq-default transient-mark-mode t)

;; auto-fill
(setq-default auto-fill-function 'do-auto-fill)

;; Always end a file with a newline
(setq require-final-newline t)

;; Stop at the end of the file, not just add lines
(setq next-line-add-newlines nil)

;; Enable wheelmouse support by default
(cond (window-system
       (mwheel-install)
))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;; end Red Hat defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; these customizations were made from the options menu.  To change 
;; them make use the options menu.  They should be self explanatory
;; (I hope)

(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(case-fold-search t)
 '(current-language-environment "Latin-9")
 '(default-input-method "latin-9-prefix")
 '(fill-column 72)
 '(global-font-lock-mode t nil (font-lock))
 '(show-paren-mode t nil (paren))
 '(show-paren-style (quote expression))
 '(transient-mark-mode t))
;; (custom-set-faces
;;   ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
;;   ;; Your init file should contain only one such instance.
;;  '(show-paren-match-face ((((class color)) (:background "turquoise")))))

;;;;;;;; Don't truncate, wrap, or fold lines of split windows ;;;
(setq truncate-partial-width-windows nil)
(setq truncate-lines nil)

;;;; The MODE Line ;;;;
(load "time") (display-time)

(column-number-mode 1)

;; title bar shows name of current buffer ;;
;; (setq frame-title-format '("emacs: %*%+ %b"))
(setq frame-title-format "%f")
;; don't show the startup message every time, I know I'm using emacs
(setq inhibit-startup-message t)
(setq make-backup-files nil)

;;;; use y or n instead of yes or no
(fset 'yes-or-no-p 'y-or-n-p)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Some custom key bindings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;; M-g does goto-line ;;;;
(global-unset-key "\M-g")
(global-set-key "\M-g" 'goto-line)

(global-set-key [f2] 'eval-buffer)	; F2
(global-set-key [f4] 'revert-buffer)    ; F4

;;;;;; quick move cursor to top or bottom of screen ;;;;;
(defun point-to-top ()
  "Put point on top line of window."
  (interactive)
  (move-to-window-line 0))

(global-set-key [?\C-,] 'point-to-top)

(defun point-to-bottom ()
  "Put point at beginning of last visible line."
  (interactive)
  (move-to-window-line -1))

(global-set-key [?\C-.] 'point-to-bottom)

(defun uncomment-region (beg end)
  "Like `comment-region' invoked with a C-u prefix arg."
  (interactive "r")
  (comment-region beg end -1))
                                                                              
(global-set-key "\C-c\C-c" 'comment-region)
(global-set-key "\C-c\C-z" 'uncomment-region)

;;;;;;;;;;;;;;;;; Use cperl-mode instead of perl-mode ;;;;;;;;;;;;;;
;; though I'm not convinced I like it better than perl-mode...
(add-to-list 'auto-mode-alist '("\\.\\([pP][Llm]\\|al\\)\\'" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl5" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("miniperl" . cperl-mode))

;;;;;;;;;; Some functions for fancy indenting and completing ;;;;;;;;;;
;; These were coded by Brett Williams

;; This is a nice idea but it ends up frustrating me more than helping me...
;;(defun indent-newline-indent()
;;  "Indent a line, newline, and indent for the next line."
;;  (interactive)
;;  (indent-for-tab-command)
;;  (newline-and-indent)
;;  )

(defun indent-or-complete ()
  "Complete if point is at end of a word, otherwise indent line."
  (interactive)
  (if (looking-at "\\>")
      ;;     (and
      ;;      (eq (char-syntax (preceding-char)) ?w)
      ;;      (not (eq (char-syntax (following-char)) ?w))
      ;;      )
      (dabbrev-expand nil)
    (indent-for-tab-command)
    ))

;; indent-or-complete seems to do the job well enough,
;; but a simple global binding to tab is not what we want
;; (if I remember correctly, it messes up the mini-buffer 
;;  where tab is generally bound to minibuffer-complete)
;;(global-set-key [tab] 'indent-or-complete)

;; Another option is to bind tab to indent-or-complete
;; within the mode-map of relevant modes. Something like:
;; (define-key java-mode-map [tab] 'indent-or-complete)
;; or even within the mode's hook such as:
(define-key text-mode-map [tab] 'indent-or-complete)
;;(define-key verilog-mode-map [tab] 'indent-or-complete)
(add-hook 'verilog-mode-hook
	  (function (lambda ()
		      (local-set-key (kbd "") 'indent-or-complete)
		      )))
			     
(add-hook 'java-mode-hook 
	  (function (lambda ()
		      (local-set-key (kbd "") 'indent-or-complete)
		      )))

(add-hook 'c-mode-common-hook 
	  (function (lambda ()
		      (setq c-basic-offset 4)
		      (local-set-key (kbd "") 'indent-or-complete)
		      ;;With tab doing completion, M-tab is free for indent-region
		      (local-set-key [?\C-c tab] 'indent-region)
		      )))

;;;;;;;;;;;;;;; color settings ;;;;;;;;;;;;;;;;;;;;;;
(set-foreground-color "black" )
;;(set-background-color "#000044" )
(set-background-color "gray")

(set-cursor-color "yellow")
(set-border-color "DarkSlateGray" )

(setq default-frame-alist
      (append default-frame-alist
	      '((foreground-color . "black")
		(background-color . "gray")
		(cursor-color . "black")
	        ;(mouse-color . "DarkSlateGray")
		)))
(set-face-foreground 'font-lock-comment-face       "DarkRed")
(set-face-foreground 'font-lock-string-face        "OrangeRed")
;(set-face-foreground 'font-lock-doc-string-face    "gray")
(set-face-foreground 'font-lock-function-name-face "DarkGreen")
(set-face-foreground 'font-lock-variable-name-face "DarkGreen")
(set-face-foreground 'font-lock-type-face          "sienna4")
(set-face-foreground 'font-lock-keyword-face       "DarkBlue")
(set-face-foreground 'font-lock-builtin-face       "DarkBlue")
(set-face-foreground 'font-lock-constant-face      "DarkYellow") ; "Wheat")

(set-face-foreground 'modeline "black")
(set-face-background 'modeline "grey100")
(set-face-background 'region "light cyan")
(set-face-foreground 'bold "DarkRed")
(set-face-foreground 'italic "DarkGreen")
(set-face-background 'highlight "blue") 
(custom-set-faces
   ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
   ;; Your init file should contain only one such instance.
 '(show-paren-match-face ((((class color)) (:background "cornsilk")))))
;; (defun match-paren (arg)
;;   "Go to the matching parenthesis if on parenthesis otherwise insert %."
;;   (interactive "p")
;;   (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
;; 	((looking-at "\\s\)") (forward-char 1) (backward-list 1))
;; 	(t (self-insert-command (or arg 1)))))
;; (global-set-key "%"		'match-paren)		; % like vi
